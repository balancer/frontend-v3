'use client'

import { Address, GetFunctionArgs, InferFunctionName } from 'viem'
import { UseContractReadConfig, erc20ABI, useContractRead } from 'wagmi'
import { ReadAbiMutability } from './contract.types'
import { useUserAccount } from '../modules/web3/useUserAccount'

type Erc20Abi = typeof erc20ABI

// TODO: could probably be auto generated by wagmi cli
export function useErc20Read<F extends InferFunctionName<Erc20Abi, string, ReadAbiMutability>>(
  tokenAddress: Address,
  functionName: F,
  args?: GetFunctionArgs<Erc20Abi, F> | null,
  additionalConfig?: Omit<
    UseContractReadConfig<Erc20Abi, F, number>,
    'abi' | 'address' | 'functionName' | 'args'
  >,
  account?: Address
) {
  const userAccount = useUserAccount()
  const config: UseContractReadConfig = {
    allowFailure: false,
    abi: erc20ABI,
    address: tokenAddress,
    account: account || userAccount.address,
    functionName: functionName as InferFunctionName<any, string, ReadAbiMutability>,
    args: args?.args,
    enabled: (account || userAccount.address) && additionalConfig?.enabled,
    ...(additionalConfig as any),
  } as const

  return useContractRead(config)
}
