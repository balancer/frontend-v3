/* eslint-disable */
import * as types from './graphql'
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  'query GetAppGlobalData {\n  tokenGetTokens {\n    address\n    name\n    symbol\n    decimals\n    chainId\n    logoURI\n    priority\n    tradable\n  }\n  blocksGetBlocksPerDay\n  blocksGetAverageBlockTime\n}\n\nquery GetAppGlobalPollingData {\n  tokenGetCurrentPrices {\n    price\n    address\n  }\n  protocolMetricsChain {\n    totalLiquidity\n    totalSwapVolume\n    totalSwapFee\n    poolCount\n    swapFee24h\n    swapVolume24h\n  }\n  blocksGetBlocksPerDay\n  blocksGetAverageBlockTime\n}\n\nquery GetTokens {\n  tokens: tokenGetTokens {\n    address\n    name\n    symbol\n    decimals\n    chainId\n    logoURI\n    priority\n    tradable\n  }\n}\n\nquery GetTokenPrices {\n  tokenPrices: tokenGetCurrentPrices {\n    price\n    address\n  }\n}\n\nquery GetTokensDynamicData($addresses: [String!]!) {\n  dynamicData: tokenGetTokensDynamicData(addresses: $addresses) {\n    ath\n    atl\n    fdv\n    high24h\n    id\n    low24h\n    marketCap\n    price\n    priceChange24h\n    priceChangePercent7d\n    priceChangePercent14d\n    priceChangePercent24h\n    priceChangePercent30d\n    tokenAddress\n    updatedAt\n  }\n}\n\nquery GetBlocksPerDay {\n  blocksPerDay: blocksGetBlocksPerDay\n  avgBlockTime: blocksGetAverageBlockTime\n}':
    types.GetAppGlobalDataDocument,
  'query GetPool($id: String!) {\n  pool: poolGetPool(id: $id) {\n    id\n    address\n    name\n    owner\n    decimals\n    factory\n    symbol\n    createTime\n    dynamicData {\n      poolId\n      swapEnabled\n      totalLiquidity\n      totalLiquidity24hAgo\n      totalShares\n      totalShares24hAgo\n      fees24h\n      swapFee\n      volume24h\n      fees48h\n      volume48h\n      lifetimeVolume\n      lifetimeSwapFees\n      holdersCount\n      swapsCount\n      sharePriceAth\n      sharePriceAthTimestamp\n      sharePriceAtl\n      sharePriceAtlTimestamp\n      totalLiquidityAth\n      totalLiquidityAthTimestamp\n      totalLiquidityAtl\n      totalLiquidityAtlTimestamp\n      volume24hAth\n      volume24hAthTimestamp\n      volume24hAtl\n      volume24hAtlTimestamp\n      fees24hAth\n      fees24hAthTimestamp\n      fees24hAtl\n      fees24hAtlTimestamp\n      apr {\n        hasRewardApr\n        thirdPartyApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        nativeRewardApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        swapApr\n        apr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        items {\n          id\n          title\n          apr {\n            ... on GqlPoolAprTotal {\n              total\n            }\n            ... on GqlPoolAprRange {\n              min\n              max\n            }\n          }\n          subItems {\n            id\n            title\n            apr {\n              ... on GqlPoolAprTotal {\n                total\n              }\n              ... on GqlPoolAprRange {\n                min\n                max\n              }\n            }\n          }\n        }\n      }\n    }\n    allTokens {\n      id\n      address\n      name\n      symbol\n      decimals\n      isNested\n      isPhantomBpt\n    }\n    displayTokens {\n      id\n      address\n      name\n      weight\n      symbol\n      nestedTokens {\n        id\n        address\n        name\n        weight\n        symbol\n      }\n    }\n    staking {\n      id\n      type\n      address\n      gauge {\n        id\n        gaugeAddress\n        version\n        status\n        otherGauges {\n          gaugeAddress\n          version\n          status\n          id\n          rewards {\n            id\n            tokenAddress\n            rewardPerSecond\n          }\n        }\n        rewards {\n          id\n          rewardPerSecond\n          tokenAddress\n        }\n      }\n    }\n    investConfig {\n      singleAssetEnabled\n      proportionalEnabled\n      options {\n        poolTokenIndex\n        poolTokenAddress\n        tokenOptions {\n          ... on GqlPoolToken {\n            ...GqlPoolToken\n          }\n        }\n      }\n    }\n    withdrawConfig {\n      singleAssetEnabled\n      proportionalEnabled\n      options {\n        poolTokenIndex\n        poolTokenAddress\n        tokenOptions {\n          ... on GqlPoolToken {\n            ...GqlPoolToken\n          }\n        }\n      }\n    }\n    ... on GqlPoolWeighted {\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n        ... on GqlPoolTokenLinear {\n          ...GqlPoolTokenLinear\n        }\n        ... on GqlPoolTokenPhantomStable {\n          ...GqlPoolTokenPhantomStable\n        }\n      }\n    }\n    ... on GqlPoolStable {\n      amp\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolMetaStable {\n      amp\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolElement {\n      unitSeconds\n      principalToken\n      baseToken\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolPhantomStable {\n      amp\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n        ... on GqlPoolTokenLinear {\n          ...GqlPoolTokenLinear\n        }\n        ... on GqlPoolTokenPhantomStable {\n          ...GqlPoolTokenPhantomStable\n        }\n      }\n    }\n    ... on GqlPoolLinear {\n      mainIndex\n      wrappedIndex\n      lowerTarget\n      upperTarget\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolLiquidityBootstrapping {\n      name\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n        ... on GqlPoolTokenLinear {\n          ...GqlPoolTokenLinear\n        }\n        ... on GqlPoolTokenPhantomStable {\n          ...GqlPoolTokenPhantomStable\n        }\n      }\n    }\n    ... on GqlPoolGyro {\n      alpha\n      beta\n      type\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n  }\n}\n\nfragment GqlPoolToken on GqlPoolToken {\n  id\n  index\n  name\n  symbol\n  balance\n  address\n  priceRate\n  decimals\n  weight\n  totalBalance\n}\n\nfragment GqlPoolTokenLinear on GqlPoolTokenLinear {\n  id\n  index\n  name\n  symbol\n  balance\n  address\n  priceRate\n  decimals\n  weight\n  mainTokenBalance\n  wrappedTokenBalance\n  totalMainTokenBalance\n  totalBalance\n  pool {\n    id\n    name\n    symbol\n    address\n    owner\n    factory\n    createTime\n    wrappedIndex\n    mainIndex\n    upperTarget\n    lowerTarget\n    totalShares\n    totalLiquidity\n    bptPriceRate\n    tokens {\n      ... on GqlPoolToken {\n        ...GqlPoolToken\n      }\n    }\n  }\n}\n\nfragment GqlPoolTokenPhantomStable on GqlPoolTokenPhantomStable {\n  id\n  index\n  name\n  symbol\n  balance\n  address\n  weight\n  priceRate\n  decimals\n  totalBalance\n  pool {\n    id\n    name\n    symbol\n    address\n    owner\n    factory\n    createTime\n    totalShares\n    totalLiquidity\n    nestingType\n    swapFee\n    amp\n    tokens {\n      ... on GqlPoolToken {\n        ...GqlPoolToken\n      }\n      ... on GqlPoolTokenLinear {\n        ...GqlPoolTokenLinear\n      }\n    }\n  }\n}\n\nquery GetPoolSwaps($first: Int, $skip: Int, $where: GqlPoolSwapFilter) {\n  swaps: poolGetSwaps(first: $first, skip: $skip, where: $where) {\n    id\n    poolId\n    timestamp\n    tokenAmountIn\n    tokenAmountOut\n    tokenIn\n    tokenOut\n    tx\n    userAddress\n    valueUSD\n  }\n}\n\nquery GetPoolJoinExits($first: Int, $skip: Int, $poolId: String!) {\n  joinExits: poolGetJoinExits(\n    first: $first\n    skip: $skip\n    where: {poolIdIn: [$poolId]}\n  ) {\n    id\n    timestamp\n    tx\n    type\n    poolId\n    valueUSD\n    amounts {\n      address\n      amount\n    }\n  }\n}\n\nquery GetPoolBptPriceChartData($address: String!, $range: GqlTokenChartDataRange!) {\n  prices: tokenGetPriceChartData(address: $address, range: $range) {\n    id\n    price\n    timestamp\n  }\n}\n\nquery GetPoolUserJoinExits($first: Int, $skip: Int, $poolId: String!) {\n  joinExits: userGetPoolJoinExits(poolId: $poolId, first: $first, skip: $skip) {\n    id\n    timestamp\n    tx\n    type\n    poolId\n    valueUSD\n    amounts {\n      address\n      amount\n    }\n  }\n}\n\nquery GetUserSwaps($first: Int, $skip: Int, $poolId: String!) {\n  swaps: userGetSwaps(first: $first, skip: $skip, poolId: $poolId) {\n    id\n    poolId\n    timestamp\n    tokenAmountIn\n    tokenAmountOut\n    tokenIn\n    tokenOut\n    tx\n    valueUSD\n  }\n}\n\nquery GetPoolSnapshots($poolId: String!, $range: GqlPoolSnapshotDataRange!) {\n  snapshots: poolGetSnapshots(id: $poolId, range: $range) {\n    id\n    timestamp\n    totalLiquidity\n    volume24h\n    fees24h\n    sharePrice\n  }\n}\n\nquery GetPoolTokensDynamicData($addresses: [String!]!) {\n  staticData: tokenGetTokensData(addresses: $addresses) {\n    id\n    tokenAddress\n    description\n    discordUrl\n    telegramUrl\n    twitterUsername\n    websiteUrl\n  }\n  dynamicData: tokenGetTokensDynamicData(addresses: $addresses) {\n    ...GqlTokenDynamicData\n  }\n}':
    types.GetPoolDocument,
  'query GetPools($first: Int, $skip: Int, $orderBy: GqlPoolOrderBy, $orderDirection: GqlPoolOrderDirection, $where: GqlPoolFilter) {\n  pools: poolGetPools(\n    first: $first\n    skip: $skip\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n  ) {\n    address\n    chain\n    createTime\n    decimals\n    displayTokens {\n      address\n      symbol\n    }\n    dynamicData {\n      totalLiquidity\n      lifetimeVolume\n      lifetimeSwapFees\n      volume24h\n      fees24h\n      holdersCount\n      swapFee\n      swapsCount\n      apr {\n        apr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        hasRewardApr\n        thirdPartyApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        nativeRewardApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        swapApr\n        items {\n          id\n          title\n          apr {\n            ... on GqlPoolAprTotal {\n              total\n            }\n            ... on GqlPoolAprRange {\n              min\n              max\n            }\n          }\n          subItems {\n            id\n            title\n            apr {\n              ... on GqlPoolAprTotal {\n                total\n              }\n              ... on GqlPoolAprRange {\n                min\n                max\n              }\n            }\n          }\n        }\n      }\n    }\n    factory\n    id\n    name\n    owner\n    symbol\n    type\n  }\n}':
    types.GetPoolsDocument,
  'query GetSorSwaps($tokenIn: String!, $tokenOut: String!, $swapType: GqlSorSwapType!, $swapAmount: BigDecimal!, $swapOptions: GqlSorSwapOptionsInput!) {\n  swaps: sorGetSwaps(\n    tokenIn: $tokenIn\n    tokenOut: $tokenOut\n    swapType: $swapType\n    swapAmount: $swapAmount\n    swapOptions: $swapOptions\n  ) {\n    ...GqlSorGetSwapsResponse\n  }\n}\n\nquery GetTokenRelativePriceChartData($tokenIn: String!, $tokenOut: String!, $range: GqlTokenChartDataRange!) {\n  prices: tokenGetRelativePriceChartData(\n    tokenIn: $tokenIn\n    tokenOut: $tokenOut\n    range: $range\n  ) {\n    id\n    price\n    timestamp\n  }\n}\n\nfragment GqlSorGetSwapsResponse on GqlSorGetSwapsResponse {\n  tokenIn\n  tokenOut\n  swapAmount\n  tokenAddresses\n  swapType\n  marketSp\n  swaps {\n    poolId\n    amount\n    userData\n    assetInIndex\n    assetOutIndex\n  }\n  returnAmount\n  returnAmountScaled\n  returnAmountFromSwaps\n  returnAmountConsideringFees\n  swapAmount\n  swapAmountScaled\n  swapAmountForSwaps\n  tokenInAmount\n  tokenOutAmount\n  effectivePrice\n  effectivePriceReversed\n  priceImpact\n  routes {\n    ...GqlSorSwapRoute\n  }\n}\n\nfragment GqlSorSwapRoute on GqlSorSwapRoute {\n  tokenIn\n  tokenOut\n  tokenInAmount\n  tokenOutAmount\n  share\n  hops {\n    ...GqlSorSwapRouteHop\n  }\n}\n\nfragment GqlSorSwapRouteHop on GqlSorSwapRouteHop {\n  poolId\n  pool {\n    id\n    name\n    type\n    symbol\n    dynamicData {\n      totalLiquidity\n    }\n    allTokens {\n      address\n      isNested\n      isPhantomBpt\n      weight\n    }\n  }\n  tokenIn\n  tokenOut\n  tokenInAmount\n  tokenOutAmount\n}\n\nquery GetTradeSelectedTokenData($tokenIn: String!, $tokenOut: String!) {\n  tokenInData: tokenGetTokenData(address: $tokenIn) {\n    id\n    tokenAddress\n    description\n    discordUrl\n    telegramUrl\n    twitterUsername\n  }\n  tokenOutData: tokenGetTokenData(address: $tokenOut) {\n    id\n    tokenAddress\n    description\n    discordUrl\n    telegramUrl\n    twitterUsername\n  }\n  tokenInDynamicData: tokenGetTokenDynamicData(address: $tokenIn) {\n    ...GqlTokenDynamicData\n  }\n  tokenOutDynamicData: tokenGetTokenDynamicData(address: $tokenOut) {\n    ...GqlTokenDynamicData\n  }\n}\n\nfragment GqlTokenDynamicData on GqlTokenDynamicData {\n  id\n  tokenAddress\n  ath\n  atl\n  marketCap\n  fdv\n  priceChange24h\n  priceChangePercent24h\n  priceChangePercent7d\n  priceChangePercent14d\n  priceChangePercent30d\n  high24h\n  low24h\n  updatedAt\n}':
    types.GetSorSwapsDocument,
}

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query GetAppGlobalData {\n  tokenGetTokens {\n    address\n    name\n    symbol\n    decimals\n    chainId\n    logoURI\n    priority\n    tradable\n  }\n  blocksGetBlocksPerDay\n  blocksGetAverageBlockTime\n}\n\nquery GetAppGlobalPollingData {\n  tokenGetCurrentPrices {\n    price\n    address\n  }\n  protocolMetricsChain {\n    totalLiquidity\n    totalSwapVolume\n    totalSwapFee\n    poolCount\n    swapFee24h\n    swapVolume24h\n  }\n  blocksGetBlocksPerDay\n  blocksGetAverageBlockTime\n}\n\nquery GetTokens {\n  tokens: tokenGetTokens {\n    address\n    name\n    symbol\n    decimals\n    chainId\n    logoURI\n    priority\n    tradable\n  }\n}\n\nquery GetTokenPrices {\n  tokenPrices: tokenGetCurrentPrices {\n    price\n    address\n  }\n}\n\nquery GetTokensDynamicData($addresses: [String!]!) {\n  dynamicData: tokenGetTokensDynamicData(addresses: $addresses) {\n    ath\n    atl\n    fdv\n    high24h\n    id\n    low24h\n    marketCap\n    price\n    priceChange24h\n    priceChangePercent7d\n    priceChangePercent14d\n    priceChangePercent24h\n    priceChangePercent30d\n    tokenAddress\n    updatedAt\n  }\n}\n\nquery GetBlocksPerDay {\n  blocksPerDay: blocksGetBlocksPerDay\n  avgBlockTime: blocksGetAverageBlockTime\n}'
): (typeof documents)['query GetAppGlobalData {\n  tokenGetTokens {\n    address\n    name\n    symbol\n    decimals\n    chainId\n    logoURI\n    priority\n    tradable\n  }\n  blocksGetBlocksPerDay\n  blocksGetAverageBlockTime\n}\n\nquery GetAppGlobalPollingData {\n  tokenGetCurrentPrices {\n    price\n    address\n  }\n  protocolMetricsChain {\n    totalLiquidity\n    totalSwapVolume\n    totalSwapFee\n    poolCount\n    swapFee24h\n    swapVolume24h\n  }\n  blocksGetBlocksPerDay\n  blocksGetAverageBlockTime\n}\n\nquery GetTokens {\n  tokens: tokenGetTokens {\n    address\n    name\n    symbol\n    decimals\n    chainId\n    logoURI\n    priority\n    tradable\n  }\n}\n\nquery GetTokenPrices {\n  tokenPrices: tokenGetCurrentPrices {\n    price\n    address\n  }\n}\n\nquery GetTokensDynamicData($addresses: [String!]!) {\n  dynamicData: tokenGetTokensDynamicData(addresses: $addresses) {\n    ath\n    atl\n    fdv\n    high24h\n    id\n    low24h\n    marketCap\n    price\n    priceChange24h\n    priceChangePercent7d\n    priceChangePercent14d\n    priceChangePercent24h\n    priceChangePercent30d\n    tokenAddress\n    updatedAt\n  }\n}\n\nquery GetBlocksPerDay {\n  blocksPerDay: blocksGetBlocksPerDay\n  avgBlockTime: blocksGetAverageBlockTime\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query GetPool($id: String!) {\n  pool: poolGetPool(id: $id) {\n    id\n    address\n    name\n    owner\n    decimals\n    factory\n    symbol\n    createTime\n    dynamicData {\n      poolId\n      swapEnabled\n      totalLiquidity\n      totalLiquidity24hAgo\n      totalShares\n      totalShares24hAgo\n      fees24h\n      swapFee\n      volume24h\n      fees48h\n      volume48h\n      lifetimeVolume\n      lifetimeSwapFees\n      holdersCount\n      swapsCount\n      sharePriceAth\n      sharePriceAthTimestamp\n      sharePriceAtl\n      sharePriceAtlTimestamp\n      totalLiquidityAth\n      totalLiquidityAthTimestamp\n      totalLiquidityAtl\n      totalLiquidityAtlTimestamp\n      volume24hAth\n      volume24hAthTimestamp\n      volume24hAtl\n      volume24hAtlTimestamp\n      fees24hAth\n      fees24hAthTimestamp\n      fees24hAtl\n      fees24hAtlTimestamp\n      apr {\n        hasRewardApr\n        thirdPartyApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        nativeRewardApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        swapApr\n        apr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        items {\n          id\n          title\n          apr {\n            ... on GqlPoolAprTotal {\n              total\n            }\n            ... on GqlPoolAprRange {\n              min\n              max\n            }\n          }\n          subItems {\n            id\n            title\n            apr {\n              ... on GqlPoolAprTotal {\n                total\n              }\n              ... on GqlPoolAprRange {\n                min\n                max\n              }\n            }\n          }\n        }\n      }\n    }\n    allTokens {\n      id\n      address\n      name\n      symbol\n      decimals\n      isNested\n      isPhantomBpt\n    }\n    displayTokens {\n      id\n      address\n      name\n      weight\n      symbol\n      nestedTokens {\n        id\n        address\n        name\n        weight\n        symbol\n      }\n    }\n    staking {\n      id\n      type\n      address\n      gauge {\n        id\n        gaugeAddress\n        version\n        status\n        otherGauges {\n          gaugeAddress\n          version\n          status\n          id\n          rewards {\n            id\n            tokenAddress\n            rewardPerSecond\n          }\n        }\n        rewards {\n          id\n          rewardPerSecond\n          tokenAddress\n        }\n      }\n    }\n    investConfig {\n      singleAssetEnabled\n      proportionalEnabled\n      options {\n        poolTokenIndex\n        poolTokenAddress\n        tokenOptions {\n          ... on GqlPoolToken {\n            ...GqlPoolToken\n          }\n        }\n      }\n    }\n    withdrawConfig {\n      singleAssetEnabled\n      proportionalEnabled\n      options {\n        poolTokenIndex\n        poolTokenAddress\n        tokenOptions {\n          ... on GqlPoolToken {\n            ...GqlPoolToken\n          }\n        }\n      }\n    }\n    ... on GqlPoolWeighted {\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n        ... on GqlPoolTokenLinear {\n          ...GqlPoolTokenLinear\n        }\n        ... on GqlPoolTokenPhantomStable {\n          ...GqlPoolTokenPhantomStable\n        }\n      }\n    }\n    ... on GqlPoolStable {\n      amp\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolMetaStable {\n      amp\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolElement {\n      unitSeconds\n      principalToken\n      baseToken\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolPhantomStable {\n      amp\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n        ... on GqlPoolTokenLinear {\n          ...GqlPoolTokenLinear\n        }\n        ... on GqlPoolTokenPhantomStable {\n          ...GqlPoolTokenPhantomStable\n        }\n      }\n    }\n    ... on GqlPoolLinear {\n      mainIndex\n      wrappedIndex\n      lowerTarget\n      upperTarget\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolLiquidityBootstrapping {\n      name\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n        ... on GqlPoolTokenLinear {\n          ...GqlPoolTokenLinear\n        }\n        ... on GqlPoolTokenPhantomStable {\n          ...GqlPoolTokenPhantomStable\n        }\n      }\n    }\n    ... on GqlPoolGyro {\n      alpha\n      beta\n      type\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n  }\n}\n\nfragment GqlPoolToken on GqlPoolToken {\n  id\n  index\n  name\n  symbol\n  balance\n  address\n  priceRate\n  decimals\n  weight\n  totalBalance\n}\n\nfragment GqlPoolTokenLinear on GqlPoolTokenLinear {\n  id\n  index\n  name\n  symbol\n  balance\n  address\n  priceRate\n  decimals\n  weight\n  mainTokenBalance\n  wrappedTokenBalance\n  totalMainTokenBalance\n  totalBalance\n  pool {\n    id\n    name\n    symbol\n    address\n    owner\n    factory\n    createTime\n    wrappedIndex\n    mainIndex\n    upperTarget\n    lowerTarget\n    totalShares\n    totalLiquidity\n    bptPriceRate\n    tokens {\n      ... on GqlPoolToken {\n        ...GqlPoolToken\n      }\n    }\n  }\n}\n\nfragment GqlPoolTokenPhantomStable on GqlPoolTokenPhantomStable {\n  id\n  index\n  name\n  symbol\n  balance\n  address\n  weight\n  priceRate\n  decimals\n  totalBalance\n  pool {\n    id\n    name\n    symbol\n    address\n    owner\n    factory\n    createTime\n    totalShares\n    totalLiquidity\n    nestingType\n    swapFee\n    amp\n    tokens {\n      ... on GqlPoolToken {\n        ...GqlPoolToken\n      }\n      ... on GqlPoolTokenLinear {\n        ...GqlPoolTokenLinear\n      }\n    }\n  }\n}\n\nquery GetPoolSwaps($first: Int, $skip: Int, $where: GqlPoolSwapFilter) {\n  swaps: poolGetSwaps(first: $first, skip: $skip, where: $where) {\n    id\n    poolId\n    timestamp\n    tokenAmountIn\n    tokenAmountOut\n    tokenIn\n    tokenOut\n    tx\n    userAddress\n    valueUSD\n  }\n}\n\nquery GetPoolJoinExits($first: Int, $skip: Int, $poolId: String!) {\n  joinExits: poolGetJoinExits(\n    first: $first\n    skip: $skip\n    where: {poolIdIn: [$poolId]}\n  ) {\n    id\n    timestamp\n    tx\n    type\n    poolId\n    valueUSD\n    amounts {\n      address\n      amount\n    }\n  }\n}\n\nquery GetPoolBptPriceChartData($address: String!, $range: GqlTokenChartDataRange!) {\n  prices: tokenGetPriceChartData(address: $address, range: $range) {\n    id\n    price\n    timestamp\n  }\n}\n\nquery GetPoolUserJoinExits($first: Int, $skip: Int, $poolId: String!) {\n  joinExits: userGetPoolJoinExits(poolId: $poolId, first: $first, skip: $skip) {\n    id\n    timestamp\n    tx\n    type\n    poolId\n    valueUSD\n    amounts {\n      address\n      amount\n    }\n  }\n}\n\nquery GetUserSwaps($first: Int, $skip: Int, $poolId: String!) {\n  swaps: userGetSwaps(first: $first, skip: $skip, poolId: $poolId) {\n    id\n    poolId\n    timestamp\n    tokenAmountIn\n    tokenAmountOut\n    tokenIn\n    tokenOut\n    tx\n    valueUSD\n  }\n}\n\nquery GetPoolSnapshots($poolId: String!, $range: GqlPoolSnapshotDataRange!) {\n  snapshots: poolGetSnapshots(id: $poolId, range: $range) {\n    id\n    timestamp\n    totalLiquidity\n    volume24h\n    fees24h\n    sharePrice\n  }\n}\n\nquery GetPoolTokensDynamicData($addresses: [String!]!) {\n  staticData: tokenGetTokensData(addresses: $addresses) {\n    id\n    tokenAddress\n    description\n    discordUrl\n    telegramUrl\n    twitterUsername\n    websiteUrl\n  }\n  dynamicData: tokenGetTokensDynamicData(addresses: $addresses) {\n    ...GqlTokenDynamicData\n  }\n}'
): (typeof documents)['query GetPool($id: String!) {\n  pool: poolGetPool(id: $id) {\n    id\n    address\n    name\n    owner\n    decimals\n    factory\n    symbol\n    createTime\n    dynamicData {\n      poolId\n      swapEnabled\n      totalLiquidity\n      totalLiquidity24hAgo\n      totalShares\n      totalShares24hAgo\n      fees24h\n      swapFee\n      volume24h\n      fees48h\n      volume48h\n      lifetimeVolume\n      lifetimeSwapFees\n      holdersCount\n      swapsCount\n      sharePriceAth\n      sharePriceAthTimestamp\n      sharePriceAtl\n      sharePriceAtlTimestamp\n      totalLiquidityAth\n      totalLiquidityAthTimestamp\n      totalLiquidityAtl\n      totalLiquidityAtlTimestamp\n      volume24hAth\n      volume24hAthTimestamp\n      volume24hAtl\n      volume24hAtlTimestamp\n      fees24hAth\n      fees24hAthTimestamp\n      fees24hAtl\n      fees24hAtlTimestamp\n      apr {\n        hasRewardApr\n        thirdPartyApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        nativeRewardApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        swapApr\n        apr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        items {\n          id\n          title\n          apr {\n            ... on GqlPoolAprTotal {\n              total\n            }\n            ... on GqlPoolAprRange {\n              min\n              max\n            }\n          }\n          subItems {\n            id\n            title\n            apr {\n              ... on GqlPoolAprTotal {\n                total\n              }\n              ... on GqlPoolAprRange {\n                min\n                max\n              }\n            }\n          }\n        }\n      }\n    }\n    allTokens {\n      id\n      address\n      name\n      symbol\n      decimals\n      isNested\n      isPhantomBpt\n    }\n    displayTokens {\n      id\n      address\n      name\n      weight\n      symbol\n      nestedTokens {\n        id\n        address\n        name\n        weight\n        symbol\n      }\n    }\n    staking {\n      id\n      type\n      address\n      gauge {\n        id\n        gaugeAddress\n        version\n        status\n        otherGauges {\n          gaugeAddress\n          version\n          status\n          id\n          rewards {\n            id\n            tokenAddress\n            rewardPerSecond\n          }\n        }\n        rewards {\n          id\n          rewardPerSecond\n          tokenAddress\n        }\n      }\n    }\n    investConfig {\n      singleAssetEnabled\n      proportionalEnabled\n      options {\n        poolTokenIndex\n        poolTokenAddress\n        tokenOptions {\n          ... on GqlPoolToken {\n            ...GqlPoolToken\n          }\n        }\n      }\n    }\n    withdrawConfig {\n      singleAssetEnabled\n      proportionalEnabled\n      options {\n        poolTokenIndex\n        poolTokenAddress\n        tokenOptions {\n          ... on GqlPoolToken {\n            ...GqlPoolToken\n          }\n        }\n      }\n    }\n    ... on GqlPoolWeighted {\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n        ... on GqlPoolTokenLinear {\n          ...GqlPoolTokenLinear\n        }\n        ... on GqlPoolTokenPhantomStable {\n          ...GqlPoolTokenPhantomStable\n        }\n      }\n    }\n    ... on GqlPoolStable {\n      amp\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolMetaStable {\n      amp\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolElement {\n      unitSeconds\n      principalToken\n      baseToken\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolPhantomStable {\n      amp\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n        ... on GqlPoolTokenLinear {\n          ...GqlPoolTokenLinear\n        }\n        ... on GqlPoolTokenPhantomStable {\n          ...GqlPoolTokenPhantomStable\n        }\n      }\n    }\n    ... on GqlPoolLinear {\n      mainIndex\n      wrappedIndex\n      lowerTarget\n      upperTarget\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n    ... on GqlPoolLiquidityBootstrapping {\n      name\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n        ... on GqlPoolTokenLinear {\n          ...GqlPoolTokenLinear\n        }\n        ... on GqlPoolTokenPhantomStable {\n          ...GqlPoolTokenPhantomStable\n        }\n      }\n    }\n    ... on GqlPoolGyro {\n      alpha\n      beta\n      type\n      nestingType\n      tokens {\n        ... on GqlPoolToken {\n          ...GqlPoolToken\n        }\n      }\n    }\n  }\n}\n\nfragment GqlPoolToken on GqlPoolToken {\n  id\n  index\n  name\n  symbol\n  balance\n  address\n  priceRate\n  decimals\n  weight\n  totalBalance\n}\n\nfragment GqlPoolTokenLinear on GqlPoolTokenLinear {\n  id\n  index\n  name\n  symbol\n  balance\n  address\n  priceRate\n  decimals\n  weight\n  mainTokenBalance\n  wrappedTokenBalance\n  totalMainTokenBalance\n  totalBalance\n  pool {\n    id\n    name\n    symbol\n    address\n    owner\n    factory\n    createTime\n    wrappedIndex\n    mainIndex\n    upperTarget\n    lowerTarget\n    totalShares\n    totalLiquidity\n    bptPriceRate\n    tokens {\n      ... on GqlPoolToken {\n        ...GqlPoolToken\n      }\n    }\n  }\n}\n\nfragment GqlPoolTokenPhantomStable on GqlPoolTokenPhantomStable {\n  id\n  index\n  name\n  symbol\n  balance\n  address\n  weight\n  priceRate\n  decimals\n  totalBalance\n  pool {\n    id\n    name\n    symbol\n    address\n    owner\n    factory\n    createTime\n    totalShares\n    totalLiquidity\n    nestingType\n    swapFee\n    amp\n    tokens {\n      ... on GqlPoolToken {\n        ...GqlPoolToken\n      }\n      ... on GqlPoolTokenLinear {\n        ...GqlPoolTokenLinear\n      }\n    }\n  }\n}\n\nquery GetPoolSwaps($first: Int, $skip: Int, $where: GqlPoolSwapFilter) {\n  swaps: poolGetSwaps(first: $first, skip: $skip, where: $where) {\n    id\n    poolId\n    timestamp\n    tokenAmountIn\n    tokenAmountOut\n    tokenIn\n    tokenOut\n    tx\n    userAddress\n    valueUSD\n  }\n}\n\nquery GetPoolJoinExits($first: Int, $skip: Int, $poolId: String!) {\n  joinExits: poolGetJoinExits(\n    first: $first\n    skip: $skip\n    where: {poolIdIn: [$poolId]}\n  ) {\n    id\n    timestamp\n    tx\n    type\n    poolId\n    valueUSD\n    amounts {\n      address\n      amount\n    }\n  }\n}\n\nquery GetPoolBptPriceChartData($address: String!, $range: GqlTokenChartDataRange!) {\n  prices: tokenGetPriceChartData(address: $address, range: $range) {\n    id\n    price\n    timestamp\n  }\n}\n\nquery GetPoolUserJoinExits($first: Int, $skip: Int, $poolId: String!) {\n  joinExits: userGetPoolJoinExits(poolId: $poolId, first: $first, skip: $skip) {\n    id\n    timestamp\n    tx\n    type\n    poolId\n    valueUSD\n    amounts {\n      address\n      amount\n    }\n  }\n}\n\nquery GetUserSwaps($first: Int, $skip: Int, $poolId: String!) {\n  swaps: userGetSwaps(first: $first, skip: $skip, poolId: $poolId) {\n    id\n    poolId\n    timestamp\n    tokenAmountIn\n    tokenAmountOut\n    tokenIn\n    tokenOut\n    tx\n    valueUSD\n  }\n}\n\nquery GetPoolSnapshots($poolId: String!, $range: GqlPoolSnapshotDataRange!) {\n  snapshots: poolGetSnapshots(id: $poolId, range: $range) {\n    id\n    timestamp\n    totalLiquidity\n    volume24h\n    fees24h\n    sharePrice\n  }\n}\n\nquery GetPoolTokensDynamicData($addresses: [String!]!) {\n  staticData: tokenGetTokensData(addresses: $addresses) {\n    id\n    tokenAddress\n    description\n    discordUrl\n    telegramUrl\n    twitterUsername\n    websiteUrl\n  }\n  dynamicData: tokenGetTokensDynamicData(addresses: $addresses) {\n    ...GqlTokenDynamicData\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query GetPools($first: Int, $skip: Int, $orderBy: GqlPoolOrderBy, $orderDirection: GqlPoolOrderDirection, $where: GqlPoolFilter) {\n  pools: poolGetPools(\n    first: $first\n    skip: $skip\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n  ) {\n    address\n    chain\n    createTime\n    decimals\n    displayTokens {\n      address\n      symbol\n    }\n    dynamicData {\n      totalLiquidity\n      lifetimeVolume\n      lifetimeSwapFees\n      volume24h\n      fees24h\n      holdersCount\n      swapFee\n      swapsCount\n      apr {\n        apr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        hasRewardApr\n        thirdPartyApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        nativeRewardApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        swapApr\n        items {\n          id\n          title\n          apr {\n            ... on GqlPoolAprTotal {\n              total\n            }\n            ... on GqlPoolAprRange {\n              min\n              max\n            }\n          }\n          subItems {\n            id\n            title\n            apr {\n              ... on GqlPoolAprTotal {\n                total\n              }\n              ... on GqlPoolAprRange {\n                min\n                max\n              }\n            }\n          }\n        }\n      }\n    }\n    factory\n    id\n    name\n    owner\n    symbol\n    type\n  }\n}'
): (typeof documents)['query GetPools($first: Int, $skip: Int, $orderBy: GqlPoolOrderBy, $orderDirection: GqlPoolOrderDirection, $where: GqlPoolFilter) {\n  pools: poolGetPools(\n    first: $first\n    skip: $skip\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n  ) {\n    address\n    chain\n    createTime\n    decimals\n    displayTokens {\n      address\n      symbol\n    }\n    dynamicData {\n      totalLiquidity\n      lifetimeVolume\n      lifetimeSwapFees\n      volume24h\n      fees24h\n      holdersCount\n      swapFee\n      swapsCount\n      apr {\n        apr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        hasRewardApr\n        thirdPartyApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        nativeRewardApr {\n          ... on GqlPoolAprTotal {\n            total\n          }\n          ... on GqlPoolAprRange {\n            min\n            max\n          }\n        }\n        swapApr\n        items {\n          id\n          title\n          apr {\n            ... on GqlPoolAprTotal {\n              total\n            }\n            ... on GqlPoolAprRange {\n              min\n              max\n            }\n          }\n          subItems {\n            id\n            title\n            apr {\n              ... on GqlPoolAprTotal {\n                total\n              }\n              ... on GqlPoolAprRange {\n                min\n                max\n              }\n            }\n          }\n        }\n      }\n    }\n    factory\n    id\n    name\n    owner\n    symbol\n    type\n  }\n}']
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query GetSorSwaps($tokenIn: String!, $tokenOut: String!, $swapType: GqlSorSwapType!, $swapAmount: BigDecimal!, $swapOptions: GqlSorSwapOptionsInput!) {\n  swaps: sorGetSwaps(\n    tokenIn: $tokenIn\n    tokenOut: $tokenOut\n    swapType: $swapType\n    swapAmount: $swapAmount\n    swapOptions: $swapOptions\n  ) {\n    ...GqlSorGetSwapsResponse\n  }\n}\n\nquery GetTokenRelativePriceChartData($tokenIn: String!, $tokenOut: String!, $range: GqlTokenChartDataRange!) {\n  prices: tokenGetRelativePriceChartData(\n    tokenIn: $tokenIn\n    tokenOut: $tokenOut\n    range: $range\n  ) {\n    id\n    price\n    timestamp\n  }\n}\n\nfragment GqlSorGetSwapsResponse on GqlSorGetSwapsResponse {\n  tokenIn\n  tokenOut\n  swapAmount\n  tokenAddresses\n  swapType\n  marketSp\n  swaps {\n    poolId\n    amount\n    userData\n    assetInIndex\n    assetOutIndex\n  }\n  returnAmount\n  returnAmountScaled\n  returnAmountFromSwaps\n  returnAmountConsideringFees\n  swapAmount\n  swapAmountScaled\n  swapAmountForSwaps\n  tokenInAmount\n  tokenOutAmount\n  effectivePrice\n  effectivePriceReversed\n  priceImpact\n  routes {\n    ...GqlSorSwapRoute\n  }\n}\n\nfragment GqlSorSwapRoute on GqlSorSwapRoute {\n  tokenIn\n  tokenOut\n  tokenInAmount\n  tokenOutAmount\n  share\n  hops {\n    ...GqlSorSwapRouteHop\n  }\n}\n\nfragment GqlSorSwapRouteHop on GqlSorSwapRouteHop {\n  poolId\n  pool {\n    id\n    name\n    type\n    symbol\n    dynamicData {\n      totalLiquidity\n    }\n    allTokens {\n      address\n      isNested\n      isPhantomBpt\n      weight\n    }\n  }\n  tokenIn\n  tokenOut\n  tokenInAmount\n  tokenOutAmount\n}\n\nquery GetTradeSelectedTokenData($tokenIn: String!, $tokenOut: String!) {\n  tokenInData: tokenGetTokenData(address: $tokenIn) {\n    id\n    tokenAddress\n    description\n    discordUrl\n    telegramUrl\n    twitterUsername\n  }\n  tokenOutData: tokenGetTokenData(address: $tokenOut) {\n    id\n    tokenAddress\n    description\n    discordUrl\n    telegramUrl\n    twitterUsername\n  }\n  tokenInDynamicData: tokenGetTokenDynamicData(address: $tokenIn) {\n    ...GqlTokenDynamicData\n  }\n  tokenOutDynamicData: tokenGetTokenDynamicData(address: $tokenOut) {\n    ...GqlTokenDynamicData\n  }\n}\n\nfragment GqlTokenDynamicData on GqlTokenDynamicData {\n  id\n  tokenAddress\n  ath\n  atl\n  marketCap\n  fdv\n  priceChange24h\n  priceChangePercent24h\n  priceChangePercent7d\n  priceChangePercent14d\n  priceChangePercent30d\n  high24h\n  low24h\n  updatedAt\n}'
): (typeof documents)['query GetSorSwaps($tokenIn: String!, $tokenOut: String!, $swapType: GqlSorSwapType!, $swapAmount: BigDecimal!, $swapOptions: GqlSorSwapOptionsInput!) {\n  swaps: sorGetSwaps(\n    tokenIn: $tokenIn\n    tokenOut: $tokenOut\n    swapType: $swapType\n    swapAmount: $swapAmount\n    swapOptions: $swapOptions\n  ) {\n    ...GqlSorGetSwapsResponse\n  }\n}\n\nquery GetTokenRelativePriceChartData($tokenIn: String!, $tokenOut: String!, $range: GqlTokenChartDataRange!) {\n  prices: tokenGetRelativePriceChartData(\n    tokenIn: $tokenIn\n    tokenOut: $tokenOut\n    range: $range\n  ) {\n    id\n    price\n    timestamp\n  }\n}\n\nfragment GqlSorGetSwapsResponse on GqlSorGetSwapsResponse {\n  tokenIn\n  tokenOut\n  swapAmount\n  tokenAddresses\n  swapType\n  marketSp\n  swaps {\n    poolId\n    amount\n    userData\n    assetInIndex\n    assetOutIndex\n  }\n  returnAmount\n  returnAmountScaled\n  returnAmountFromSwaps\n  returnAmountConsideringFees\n  swapAmount\n  swapAmountScaled\n  swapAmountForSwaps\n  tokenInAmount\n  tokenOutAmount\n  effectivePrice\n  effectivePriceReversed\n  priceImpact\n  routes {\n    ...GqlSorSwapRoute\n  }\n}\n\nfragment GqlSorSwapRoute on GqlSorSwapRoute {\n  tokenIn\n  tokenOut\n  tokenInAmount\n  tokenOutAmount\n  share\n  hops {\n    ...GqlSorSwapRouteHop\n  }\n}\n\nfragment GqlSorSwapRouteHop on GqlSorSwapRouteHop {\n  poolId\n  pool {\n    id\n    name\n    type\n    symbol\n    dynamicData {\n      totalLiquidity\n    }\n    allTokens {\n      address\n      isNested\n      isPhantomBpt\n      weight\n    }\n  }\n  tokenIn\n  tokenOut\n  tokenInAmount\n  tokenOutAmount\n}\n\nquery GetTradeSelectedTokenData($tokenIn: String!, $tokenOut: String!) {\n  tokenInData: tokenGetTokenData(address: $tokenIn) {\n    id\n    tokenAddress\n    description\n    discordUrl\n    telegramUrl\n    twitterUsername\n  }\n  tokenOutData: tokenGetTokenData(address: $tokenOut) {\n    id\n    tokenAddress\n    description\n    discordUrl\n    telegramUrl\n    twitterUsername\n  }\n  tokenInDynamicData: tokenGetTokenDynamicData(address: $tokenIn) {\n    ...GqlTokenDynamicData\n  }\n  tokenOutDynamicData: tokenGetTokenDynamicData(address: $tokenOut) {\n    ...GqlTokenDynamicData\n  }\n}\n\nfragment GqlTokenDynamicData on GqlTokenDynamicData {\n  id\n  tokenAddress\n  ath\n  atl\n  marketCap\n  fdv\n  priceChange24h\n  priceChangePercent24h\n  priceChangePercent7d\n  priceChangePercent14d\n  priceChangePercent30d\n  high24h\n  low24h\n  updatedAt\n}']

export function graphql(source: string) {
  return (documents as any)[source] ?? {}
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never
